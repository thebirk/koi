fn vec2(x, y) {
	if type(x) != "number" || type(x) != "number" {
		return null;
	}
	v := {x = x, y = y};
	v.metatable["add"] = vec2_add;
}

fn vec2_add(self, other) {
	return vec2(self.x + other.x, self.y + other.y);
}

fn Bitmap(w, h) do {
	width = w,
	height = h,
	pixels = array(w*h, 0),

	clear_color = fn(self, color) {
		i := 0;
		for i < self.width*self.height {
			self.pixels[i] = color;
		}
	},

	clear = fn(self) {
		self:clear_color(0);
	},

	fillrect = fn(self, xpos, ypos, w, h, color) {
		y := 0;
		for y < h {
			yy := y + ypos;
			if yy < 0 || yy >= self.height do continue;
			x := 0;
			for x < w {
				xx := x + xpos;
				if xx < 0 || xx >= self.width do continue;
				self.pixels[xx+yy*self.width] = color;
			}
		}
	},

	metatable = {
		index = fn(self, index) {
			return self.pixels[index];
		},
		index_assign = fn(self, index, value) {
			self.pixels[index] = value;
		},
	},
};

fn main() {
	bm := Bitmap(32*32);
	bm:clear();

	bm[2 + 3 * bm.width] = 12;
	print bm[2 + 3 * bm.width];
}


//////////////////////////

const vec2_typeid = typeid("vec2");

fn vec2(x, y) {
	result := {
		typeid = vec2_typeid,

		x = x,
		y = y,

		add = fn(self, other) {
			assert_type(self, vec2_typeid);
			assert_type(other, vec2_typeid);
			self.x += other.x;
			self.y += other.y;
		},
	};

	// Custom function like Lua that way we can grab it directly from the
	// table when doing operations, instead of going through the vm/hashtable
	set_metatable(result, vec2_metatable);

	return result;
}

// This Value should have a const field, that means any copy will also be const
const vec2_metatable = {
	add = fn(a, b) {
		return vec2(a.x + b.x, a.y + b.y);
	},
};

fn main(args) {
	p1 := vec2(1, 3);
	p2 := vec2(4, 2);
	p3 := p1 + p2; // same as p1.metatable["add"](p1, p2)
	p1:add(p2);
}