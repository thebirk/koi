fn find_prime_iterative(initial) {
	prime := 1;
	curr := 1;
	prime_count := 0;

	color := 31;

	for prime_count < initial {
		denom := 2;
		for denom < curr {
			if curr % denom == 0 do curr += 1;
			denom += 1;
		}

		prime = curr;
		curr += 1;
		prime_count += 1;

		if prime_count % 100 == 0 {
			if color > 37 do color = 31;
			print "\e[", color, "m", prime_count, "\e[0m\n";
			color += 1;
		}
	}


	return prime;
}

fn colors() {
	i := 0;
	for i < 256 {
		if !(i == 0) do if i % 16 == 0 do print "\e[0m\n";
		print "\e[48;5;", i, "m  ";
		i += 1;
	}

	print "\e[0m\n";
}

fn main(arg) {
	colors();
	print find_prime_iterative(20000);
}